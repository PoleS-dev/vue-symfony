{
  "courses": [
    {
      "id": 1,
      "title": "Installation et Configuration",
      "category": "setup",
      "description": "Guide complet pour installer et configurer WordPress",
      "content": {
        "introduction": "WordPress est le CMS le plus populaire au monde, propulsant plus de 40% des sites web.",
        "steps": [
          "Installation locale avec XAMPP/WAMP",
          "Configuration de la base de données",
          "Installation via FTP",
          "Configuration wp-config.php",
          "Sécurisation de base"
        ],
        "code": "// wp-config.php\ndefine('DB_NAME', 'database_name');\ndefine('DB_USER', 'username');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8');\ndefine('DB_COLLATE', '');\n\n// Sécurité\ndefine('AUTH_KEY', 'your-unique-auth-key');\ndefine('SECURE_AUTH_KEY', 'your-unique-secure-auth-key');\ndefine('LOGGED_IN_KEY', 'your-unique-logged-in-key');\ndefine('NONCE_KEY', 'your-unique-nonce-key');\n\n// Désactiver l'édition de fichiers\ndefine('DISALLOW_FILE_EDIT', true);\n\n// Activer le mode debug\ndefine('WP_DEBUG', true);\ndefine('WP_DEBUG_LOG', true);\ndefine('WP_DEBUG_DISPLAY', false);"
      }
    },
    {
      "id": 2,
      "title": "Thèmes WordPress",
      "category": "themes",
      "description": "Créer et personnaliser des thèmes WordPress",
      "content": {
        "introduction": "Les thèmes contrôlent l'apparence et la mise en page de votre site WordPress.",
        "steps": [
          "Structure d'un thème",
          "Fichiers de template",
          "Hiérarchie des templates",
          "Fonctions du thème",
          "Personnalisation avec le Customizer"
        ],
        "code": "<?php\n// functions.php\nfunction my_theme_setup() {\n    // Support des images à la une\n    add_theme_support('post-thumbnails');\n    \n    // Support du titre dynamique\n    add_theme_support('title-tag');\n    \n    // Support des menus\n    add_theme_support('menus');\n    \n    // Enregistrer un menu\n    register_nav_menus(array(\n        'primary' => 'Menu Principal',\n        'footer' => 'Menu Footer'\n    ));\n    \n    // Tailles d'images personnalisées\n    add_image_size('hero-image', 1200, 600, true);\n    add_image_size('thumbnail-custom', 300, 200, true);\n}\nadd_action('after_setup_theme', 'my_theme_setup');\n\n// Enqueue des styles et scripts\nfunction my_theme_scripts() {\n    wp_enqueue_style('theme-style', get_stylesheet_uri());\n    wp_enqueue_script('theme-script', get_template_directory_uri() . '/js/script.js', array('jquery'), '1.0', true);\n}\nadd_action('wp_enqueue_scripts', 'my_theme_scripts');\n\n// Enregistrer des sidebars\nfunction my_theme_widgets_init() {\n    register_sidebar(array(\n        'name' => 'Sidebar Principal',\n        'id' => 'sidebar-1',\n        'before_widget' => '<div class=\"widget\">',\n        'after_widget' => '</div>',\n        'before_title' => '<h3 class=\"widget-title\">',\n        'after_title' => '</h3>'\n    ));\n}\nadd_action('widgets_init', 'my_theme_widgets_init');\n\n// Template header.php\n<!DOCTYPE html>\n<html <?php language_attributes(); ?>>\n<head>\n    <meta charset=\"<?php bloginfo('charset'); ?>\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <?php wp_head(); ?>\n</head>\n<body <?php body_class(); ?>>\n    <header>\n        <h1><?php bloginfo('name'); ?></h1>\n        <p><?php bloginfo('description'); ?></p>\n        <?php wp_nav_menu(array('theme_location' => 'primary')); ?>\n    </header>\n\n// Template index.php\n<?php get_header(); ?>\n\n<main>\n    <?php if (have_posts()) : ?>\n        <?php while (have_posts()) : the_post(); ?>\n            <article>\n                <h2><a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a></h2>\n                <div class=\"meta\">\n                    Publié le <?php the_date(); ?> par <?php the_author(); ?>\n                </div>\n                <?php the_excerpt(); ?>\n            </article>\n        <?php endwhile; ?>\n        \n        <?php the_posts_navigation(); ?>\n    <?php else : ?>\n        <p>Aucun article trouvé.</p>\n    <?php endif; ?>\n</main>\n\n<?php get_sidebar(); ?>\n<?php get_footer(); ?>"
      }
    },
    {
      "id": 3,
      "title": "Plugins WordPress",
      "category": "plugins",
      "description": "Développer des plugins WordPress personnalisés",
      "content": {
        "introduction": "Les plugins permettent d'étendre les fonctionnalités de WordPress sans modifier le core.",
        "steps": [
          "Structure d'un plugin",
          "Hooks et filtres",
          "Création de pages d'administration",
          "Base de données personnalisée",
          "Activation et désactivation"
        ],
        "code": "<?php\n/**\n * Plugin Name: Mon Plugin Custom\n * Description: Un plugin d'exemple pour WordPress\n * Version: 1.0\n * Author: Votre Nom\n */\n\n// Empêcher l'accès direct\nif (!defined('ABSPATH')) {\n    exit;\n}\n\n// Classe principale du plugin\nclass MonPluginCustom {\n    \n    public function __construct() {\n        add_action('init', array($this, 'init'));\n        register_activation_hook(__FILE__, array($this, 'activate'));\n        register_deactivation_hook(__FILE__, array($this, 'deactivate'));\n    }\n    \n    public function init() {\n        // Ajouter un shortcode\n        add_shortcode('mon_shortcode', array($this, 'shortcode_handler'));\n        \n        // Ajouter une page d'administration\n        add_action('admin_menu', array($this, 'add_admin_menu'));\n        \n        // Enqueue des scripts\n        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));\n    }\n    \n    public function activate() {\n        // Créer une table personnalisée\n        global $wpdb;\n        \n        $table_name = $wpdb->prefix . 'mon_plugin_data';\n        \n        $charset_collate = $wpdb->get_charset_collate();\n        \n        $sql = \"CREATE TABLE $table_name (\n            id mediumint(9) NOT NULL AUTO_INCREMENT,\n            name tinytext NOT NULL,\n            email varchar(100) NOT NULL,\n            created_at datetime DEFAULT CURRENT_TIMESTAMP,\n            PRIMARY KEY (id)\n        ) $charset_collate;\";\n        \n        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');\n        dbDelta($sql);\n    }\n    \n    public function deactivate() {\n        // Nettoyage si nécessaire\n        wp_clear_scheduled_hook('mon_plugin_cron');\n    }\n    \n    public function shortcode_handler($atts) {\n        $atts = shortcode_atts(array(\n            'titre' => 'Titre par défaut',\n            'couleur' => 'blue'\n        ), $atts);\n        \n        return '<div style=\"color: ' . esc_attr($atts['couleur']) . '\">' . \n               '<h3>' . esc_html($atts['titre']) . '</h3>' .\n               '<p>Contenu du shortcode</p>' .\n               '</div>';\n    }\n    \n    public function add_admin_menu() {\n        add_menu_page(\n            'Mon Plugin',\n            'Mon Plugin',\n            'manage_options',\n            'mon-plugin',\n            array($this, 'admin_page'),\n            'dashicons-admin-generic',\n            30\n        );\n    }\n    \n    public function admin_page() {\n        if (isset($_POST['submit'])) {\n            $name = sanitize_text_field($_POST['name']);\n            $email = sanitize_email($_POST['email']);\n            \n            global $wpdb;\n            $table_name = $wpdb->prefix . 'mon_plugin_data';\n            \n            $wpdb->insert(\n                $table_name,\n                array(\n                    'name' => $name,\n                    'email' => $email\n                ),\n                array('%s', '%s')\n            );\n            \n            echo '<div class=\"notice notice-success\"><p>Données sauvegardées!</p></div>';\n        }\n        \n        ?>\n        <div class=\"wrap\">\n            <h1>Mon Plugin Admin</h1>\n            <form method=\"post\">\n                <table class=\"form-table\">\n                    <tr>\n                        <th><label for=\"name\">Nom</label></th>\n                        <td><input type=\"text\" id=\"name\" name=\"name\" required></td>\n                    </tr>\n                    <tr>\n                        <th><label for=\"email\">Email</label></th>\n                        <td><input type=\"email\" id=\"email\" name=\"email\" required></td>\n                    </tr>\n                </table>\n                <?php submit_button(); ?>\n            </form>\n        </div>\n        <?php\n    }\n    \n    public function enqueue_scripts() {\n        wp_enqueue_script(\n            'mon-plugin-js',\n            plugin_dir_url(__FILE__) . 'js/script.js',\n            array('jquery'),\n            '1.0',\n            true\n        );\n        \n        wp_enqueue_style(\n            'mon-plugin-css',\n            plugin_dir_url(__FILE__) . 'css/style.css',\n            array(),\n            '1.0'\n        );\n    }\n}\n\n// Initialiser le plugin\nnew MonPluginCustom();\n\n// Ajouter des hooks personnalisés\nfunction mon_plugin_custom_hook() {\n    do_action('mon_plugin_action');\n}\n\n// Ajouter des filtres\nfunction mon_plugin_filter_content($content) {\n    if (is_single()) {\n        $content .= '<p>Ajouté par mon plugin!</p>';\n    }\n    return $content;\n}\nadd_filter('the_content', 'mon_plugin_filter_content');\n\n// AJAX Handler\nfunction mon_plugin_ajax_handler() {\n    check_ajax_referer('mon_plugin_nonce', 'nonce');\n    \n    $response = array(\n        'success' => true,\n        'message' => 'Données traitées avec succès'\n    );\n    \n    wp_send_json($response);\n}\nadd_action('wp_ajax_mon_plugin_action', 'mon_plugin_ajax_handler');\nadd_action('wp_ajax_nopriv_mon_plugin_action', 'mon_plugin_ajax_handler');\n\n?>"
      }
    },
    {
      "id": 4,
      "title": "Custom Post Types",
      "category": "custom-types",
      "description": "Créer des types de contenu personnalisés",
      "content": {
        "introduction": "Les Custom Post Types permettent de créer des types de contenu spécifiques à vos besoins.",
        "steps": [
          "Enregistrement d'un CPT",
          "Métaboxes personnalisées",
          "Taxonomies personnalisées",
          "Templates pour CPT",
          "Requêtes personnalisées"
        ],
        "code": "<?php\n// Enregistrer un Custom Post Type\nfunction register_produit_post_type() {\n    $args = array(\n        'labels' => array(\n            'name' => 'Produits',\n            'singular_name' => 'Produit',\n            'add_new' => 'Ajouter un produit',\n            'add_new_item' => 'Ajouter un nouveau produit',\n            'edit_item' => 'Modifier le produit',\n            'new_item' => 'Nouveau produit',\n            'view_item' => 'Voir le produit',\n            'search_items' => 'Rechercher des produits',\n            'not_found' => 'Aucun produit trouvé',\n            'not_found_in_trash' => 'Aucun produit dans la corbeille'\n        ),\n        'public' => true,\n        'has_archive' => true,\n        'rewrite' => array('slug' => 'produits'),\n        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),\n        'menu_icon' => 'dashicons-products',\n        'show_in_rest' => true, // Support Gutenberg\n        'capability_type' => 'post',\n        'hierarchical' => false\n    );\n    \n    register_post_type('produit', $args);\n}\nadd_action('init', 'register_produit_post_type');\n\n// Enregistrer une taxonomie personnalisée\nfunction register_categorie_produit_taxonomy() {\n    $args = array(\n        'labels' => array(\n            'name' => 'Catégories de produits',\n            'singular_name' => 'Catégorie de produit',\n            'search_items' => 'Rechercher des catégories',\n            'popular_items' => 'Catégories populaires',\n            'all_items' => 'Toutes les catégories',\n            'edit_item' => 'Modifier la catégorie',\n            'update_item' => 'Mettre à jour la catégorie',\n            'add_new_item' => 'Ajouter une nouvelle catégorie',\n            'new_item_name' => 'Nom de la nouvelle catégorie'\n        ),\n        'hierarchical' => true,\n        'show_ui' => true,\n        'show_admin_column' => true,\n        'query_var' => true,\n        'rewrite' => array('slug' => 'categorie-produit'),\n        'show_in_rest' => true\n    );\n    \n    register_taxonomy('categorie_produit', 'produit', $args);\n}\nadd_action('init', 'register_categorie_produit_taxonomy');\n\n// Ajouter des métaboxes personnalisées\nfunction add_produit_metaboxes() {\n    add_meta_box(\n        'produit-details',\n        'Détails du produit',\n        'produit_details_callback',\n        'produit',\n        'normal',\n        'high'\n    );\n}\nadd_action('add_meta_boxes', 'add_produit_metaboxes');\n\nfunction produit_details_callback($post) {\n    wp_nonce_field('produit_details_nonce', 'produit_details_nonce');\n    \n    $prix = get_post_meta($post->ID, '_produit_prix', true);\n    $stock = get_post_meta($post->ID, '_produit_stock', true);\n    $sku = get_post_meta($post->ID, '_produit_sku', true);\n    \n    ?>\n    <table class=\"form-table\">\n        <tr>\n            <th><label for=\"produit_prix\">Prix (€)</label></th>\n            <td><input type=\"number\" id=\"produit_prix\" name=\"produit_prix\" value=\"<?php echo esc_attr($prix); ?>\" step=\"0.01\" /></td>\n        </tr>\n        <tr>\n            <th><label for=\"produit_stock\">Stock</label></th>\n            <td><input type=\"number\" id=\"produit_stock\" name=\"produit_stock\" value=\"<?php echo esc_attr($stock); ?>\" /></td>\n        </tr>\n        <tr>\n            <th><label for=\"produit_sku\">SKU</label></th>\n            <td><input type=\"text\" id=\"produit_sku\" name=\"produit_sku\" value=\"<?php echo esc_attr($sku); ?>\" /></td>\n        </tr>\n    </table>\n    <?php\n}\n\n// Sauvegarder les métadonnées\nfunction save_produit_details($post_id) {\n    if (!isset($_POST['produit_details_nonce']) || !wp_verify_nonce($_POST['produit_details_nonce'], 'produit_details_nonce')) {\n        return;\n    }\n    \n    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {\n        return;\n    }\n    \n    if (!current_user_can('edit_post', $post_id)) {\n        return;\n    }\n    \n    if (isset($_POST['produit_prix'])) {\n        update_post_meta($post_id, '_produit_prix', sanitize_text_field($_POST['produit_prix']));\n    }\n    \n    if (isset($_POST['produit_stock'])) {\n        update_post_meta($post_id, '_produit_stock', intval($_POST['produit_stock']));\n    }\n    \n    if (isset($_POST['produit_sku'])) {\n        update_post_meta($post_id, '_produit_sku', sanitize_text_field($_POST['produit_sku']));\n    }\n}\nadd_action('save_post', 'save_produit_details');\n\n// Template pour afficher les produits\n// single-produit.php\n<?php get_header(); ?>\n\n<main>\n    <?php while (have_posts()) : the_post(); ?>\n        <article>\n            <h1><?php the_title(); ?></h1>\n            \n            <?php if (has_post_thumbnail()) : ?>\n                <div class=\"produit-image\">\n                    <?php the_post_thumbnail('large'); ?>\n                </div>\n            <?php endif; ?>\n            \n            <div class=\"produit-details\">\n                <?php\n                $prix = get_post_meta(get_the_ID(), '_produit_prix', true);\n                $stock = get_post_meta(get_the_ID(), '_produit_stock', true);\n                $sku = get_post_meta(get_the_ID(), '_produit_sku', true);\n                ?>\n                \n                <?php if ($prix) : ?>\n                    <p class=\"prix\">Prix: <?php echo esc_html($prix); ?> €</p>\n                <?php endif; ?>\n                \n                <?php if ($stock) : ?>\n                    <p class=\"stock\">En stock: <?php echo esc_html($stock); ?></p>\n                <?php endif; ?>\n                \n                <?php if ($sku) : ?>\n                    <p class=\"sku\">SKU: <?php echo esc_html($sku); ?></p>\n                <?php endif; ?>\n            </div>\n            \n            <div class=\"produit-content\">\n                <?php the_content(); ?>\n            </div>\n            \n            <div class=\"produit-categories\">\n                <?php\n                $categories = get_the_terms(get_the_ID(), 'categorie_produit');\n                if ($categories) {\n                    echo '<p>Catégories: ';\n                    foreach ($categories as $category) {\n                        echo '<a href=\"' . get_term_link($category) . '\">' . $category->name . '</a> ';\n                    }\n                    echo '</p>';\n                }\n                ?>\n            </div>\n        </article>\n    <?php endwhile; ?>\n</main>\n\n<?php get_footer(); ?>\n\n// Requête personnalisée pour afficher les produits\nfunction get_produits_populaires($limit = 5) {\n    $args = array(\n        'post_type' => 'produit',\n        'posts_per_page' => $limit,\n        'meta_key' => '_produit_stock',\n        'meta_value' => '0',\n        'meta_compare' => '>',\n        'orderby' => 'meta_value_num',\n        'order' => 'DESC'\n    );\n    \n    return new WP_Query($args);\n}\n\n// Utilisation dans un template\n$produits = get_produits_populaires(3);\nif ($produits->have_posts()) {\n    echo '<h2>Produits populaires</h2>';\n    while ($produits->have_posts()) {\n        $produits->the_post();\n        // Afficher le produit\n    }\n    wp_reset_postdata();\n}\n?>"
      }
    },
    {
      "id": 5,
      "title": "API REST WordPress",
      "category": "api",
      "description": "Utiliser et étendre l'API REST de WordPress",
      "content": {
        "introduction": "L'API REST WordPress permet d'accéder aux contenus depuis des applications externes.",
        "steps": [
          "Endpoints par défaut",
          "Authentification",
          "Endpoints personnalisés",
          "Modification des réponses",
          "Sécurité de l'API"
        ],
        "code": "<?php\n// Créer un endpoint personnalisé\nfunction register_custom_rest_routes() {\n    register_rest_route('mon-api/v1', '/produits', array(\n        'methods' => 'GET',\n        'callback' => 'get_produits_endpoint',\n        'permission_callback' => '__return_true'\n    ));\n    \n    register_rest_route('mon-api/v1', '/produits/(?P<id>\\d+)', array(\n        'methods' => 'GET',\n        'callback' => 'get_produit_endpoint',\n        'permission_callback' => '__return_true',\n        'args' => array(\n            'id' => array(\n                'validate_callback' => function($param, $request, $key) {\n                    return is_numeric($param);\n                }\n            )\n        )\n    ));\n    \n    register_rest_route('mon-api/v1', '/produits', array(\n        'methods' => 'POST',\n        'callback' => 'create_produit_endpoint',\n        'permission_callback' => function() {\n            return current_user_can('edit_posts');\n        },\n        'args' => array(\n            'titre' => array(\n                'required' => true,\n                'validate_callback' => function($param, $request, $key) {\n                    return is_string($param) && !empty($param);\n                }\n            ),\n            'prix' => array(\n                'required' => true,\n                'validate_callback' => function($param, $request, $key) {\n                    return is_numeric($param);\n                }\n            )\n        )\n    ));\n}\nadd_action('rest_api_init', 'register_custom_rest_routes');\n\n// Callback pour récupérer les produits\nfunction get_produits_endpoint($request) {\n    $params = $request->get_params();\n    $page = isset($params['page']) ? intval($params['page']) : 1;\n    $per_page = isset($params['per_page']) ? intval($params['per_page']) : 10;\n    \n    $args = array(\n        'post_type' => 'produit',\n        'posts_per_page' => $per_page,\n        'paged' => $page,\n        'post_status' => 'publish'\n    );\n    \n    if (isset($params['categorie'])) {\n        $args['tax_query'] = array(\n            array(\n                'taxonomy' => 'categorie_produit',\n                'field' => 'slug',\n                'terms' => $params['categorie']\n            )\n        );\n    }\n    \n    $query = new WP_Query($args);\n    $produits = array();\n    \n    if ($query->have_posts()) {\n        while ($query->have_posts()) {\n            $query->the_post();\n            $produits[] = array(\n                'id' => get_the_ID(),\n                'titre' => get_the_title(),\n                'contenu' => get_the_content(),\n                'prix' => get_post_meta(get_the_ID(), '_produit_prix', true),\n                'stock' => get_post_meta(get_the_ID(), '_produit_stock', true),\n                'image' => get_the_post_thumbnail_url(get_the_ID(), 'medium'),\n                'categories' => wp_get_post_terms(get_the_ID(), 'categorie_produit', array('fields' => 'names')),\n                'date' => get_the_date('c')\n            );\n        }\n        wp_reset_postdata();\n    }\n    \n    return new WP_REST_Response(array(\n        'produits' => $produits,\n        'total' => $query->found_posts,\n        'pages' => $query->max_num_pages\n    ), 200);\n}\n\n// Callback pour récupérer un produit spécifique\nfunction get_produit_endpoint($request) {\n    $id = $request['id'];\n    $post = get_post($id);\n    \n    if (!$post || $post->post_type !== 'produit') {\n        return new WP_Error('produit_not_found', 'Produit non trouvé', array('status' => 404));\n    }\n    \n    return array(\n        'id' => $post->ID,\n        'titre' => $post->post_title,\n        'contenu' => apply_filters('the_content', $post->post_content),\n        'prix' => get_post_meta($post->ID, '_produit_prix', true),\n        'stock' => get_post_meta($post->ID, '_produit_stock', true),\n        'sku' => get_post_meta($post->ID, '_produit_sku', true),\n        'image' => get_the_post_thumbnail_url($post->ID, 'large'),\n        'categories' => wp_get_post_terms($post->ID, 'categorie_produit'),\n        'date' => get_the_date('c', $post->ID)\n    );\n}\n\n// Callback pour créer un produit\nfunction create_produit_endpoint($request) {\n    $params = $request->get_params();\n    \n    $post_data = array(\n        'post_title' => sanitize_text_field($params['titre']),\n        'post_content' => isset($params['contenu']) ? wp_kses_post($params['contenu']) : '',\n        'post_status' => 'publish',\n        'post_type' => 'produit',\n        'post_author' => get_current_user_id()\n    );\n    \n    $post_id = wp_insert_post($post_data);\n    \n    if (is_wp_error($post_id)) {\n        return new WP_Error('creation_failed', 'Impossible de créer le produit', array('status' => 500));\n    }\n    \n    // Ajouter les métadonnées\n    update_post_meta($post_id, '_produit_prix', floatval($params['prix']));\n    \n    if (isset($params['stock'])) {\n        update_post_meta($post_id, '_produit_stock', intval($params['stock']));\n    }\n    \n    if (isset($params['sku'])) {\n        update_post_meta($post_id, '_produit_sku', sanitize_text_field($params['sku']));\n    }\n    \n    return new WP_REST_Response(array(\n        'id' => $post_id,\n        'message' => 'Produit créé avec succès'\n    ), 201);\n}\n\n// Modifier la réponse de l'API par défaut\nfunction modify_rest_post_response($response, $post, $request) {\n    if ($post->post_type === 'produit') {\n        $data = $response->get_data();\n        \n        // Ajouter des champs personnalisés\n        $data['prix'] = get_post_meta($post->ID, '_produit_prix', true);\n        $data['stock'] = get_post_meta($post->ID, '_produit_stock', true);\n        $data['en_stock'] = intval(get_post_meta($post->ID, '_produit_stock', true)) > 0;\n        \n        $response->set_data($data);\n    }\n    \n    return $response;\n}\nadd_filter('rest_prepare_produit', 'modify_rest_post_response', 10, 3);\n\n// Authentification par token\nfunction custom_rest_authentication($user) {\n    if (!empty($user)) {\n        return $user;\n    }\n    \n    $token = $_SERVER['HTTP_X_API_TOKEN'] ?? '';\n    \n    if (empty($token)) {\n        return $user;\n    }\n    \n    // Vérifier le token dans la base de données\n    $user_id = get_user_meta_by_token($token);\n    \n    if ($user_id) {\n        return get_user_by('id', $user_id);\n    }\n    \n    return $user;\n}\nadd_filter('determine_current_user', 'custom_rest_authentication');\n\n// Exemples d'utilisation côté client\n/*\n// JavaScript - Récupérer les produits\nfetch('/wp-json/mon-api/v1/produits?page=1&per_page=5')\n    .then(response => response.json())\n    .then(data => {\n        console.log(data.produits);\n    });\n\n// JavaScript - Créer un produit\nfetch('/wp-json/mon-api/v1/produits', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': wpApiSettings.nonce\n    },\n    body: JSON.stringify({\n        titre: 'Nouveau produit',\n        prix: 29.99,\n        stock: 10\n    })\n})\n.then(response => response.json())\n.then(data => {\n    console.log('Produit créé:', data);\n});\n*/\n\n// Désactiver l'API REST pour les non-connectés (sécurité)\nfunction disable_rest_api_for_guests($result) {\n    if (!is_user_logged_in()) {\n        return new WP_Error('rest_forbidden', 'Accès non autorisé', array('status' => 401));\n    }\n    return $result;\n}\n// add_filter('rest_authentication_errors', 'disable_rest_api_for_guests');\n\n?>"
      }
    },
    {
      "id": 6,
      "title": "Sécurité WordPress",
      "category": "security",
      "description": "Sécuriser votre site WordPress",
      "content": {
        "introduction": "La sécurité est cruciale pour protéger votre site WordPress contre les attaques.",
        "steps": [
          "Mises à jour régulières",
          "Utilisateurs et permissions",
          "Sécurisation des fichiers",
          "Protection contre les attaques",
          "Monitoring et logs"
        ],
        "code": "<?php\n// wp-config.php - Configuration sécurisée\n\n// Désactiver l'édition de fichiers depuis l'admin\ndefine('DISALLOW_FILE_EDIT', true);\ndefine('DISALLOW_FILE_MODS', true);\n\n// Désactiver les mises à jour automatiques\ndefine('WP_AUTO_UPDATE_CORE', false);\n\n// Sécuriser les clés et salts\ndefine('AUTH_KEY', 'your-unique-phrase-here');\ndefine('SECURE_AUTH_KEY', 'your-unique-phrase-here');\ndefine('LOGGED_IN_KEY', 'your-unique-phrase-here');\ndefine('NONCE_KEY', 'your-unique-phrase-here');\ndefine('AUTH_SALT', 'your-unique-phrase-here');\ndefine('SECURE_AUTH_SALT', 'your-unique-phrase-here');\ndefine('LOGGED_IN_SALT', 'your-unique-phrase-here');\ndefine('NONCE_SALT', 'your-unique-phrase-here');\n\n// Modifier le préfixe de table\n$table_prefix = 'wp_abc123_';\n\n// Limiter les révisions\ndefine('WP_POST_REVISIONS', 3);\n\n// Augmenter la durée de vie des cookies\ndefine('COOKIE_DOMAIN', '.example.com');\n\n// functions.php - Fonctions de sécurité\n\n// Masquer la version de WordPress\nfunction remove_wp_version() {\n    return '';\n}\nadd_filter('the_generator', 'remove_wp_version');\n\n// Désactiver XML-RPC\nfunction disable_xmlrpc($methods) {\n    return array();\n}\nadd_filter('xmlrpc_methods', 'disable_xmlrpc');\n\n// Ou complètement\nadd_filter('xmlrpc_enabled', '__return_false');\n\n// Protéger contre les tentatives de login\nfunction limit_login_attempts() {\n    $ip = $_SERVER['REMOTE_ADDR'];\n    $attempts = get_transient('failed_login_' . $ip);\n    \n    if ($attempts && $attempts >= 5) {\n        wp_die('Trop de tentatives de connexion. Réessayez dans 30 minutes.');\n    }\n}\nadd_action('wp_login_failed', 'record_failed_login');\nadd_action('wp_authenticate_user', 'check_failed_login');\n\nfunction record_failed_login($username) {\n    $ip = $_SERVER['REMOTE_ADDR'];\n    $attempts = get_transient('failed_login_' . $ip);\n    $attempts = $attempts ? $attempts + 1 : 1;\n    set_transient('failed_login_' . $ip, $attempts, 30 * MINUTE_IN_SECONDS);\n}\n\nfunction check_failed_login($user) {\n    $ip = $_SERVER['REMOTE_ADDR'];\n    $attempts = get_transient('failed_login_' . $ip);\n    \n    if ($attempts && $attempts >= 5) {\n        return new WP_Error('too_many_attempts', 'Trop de tentatives de connexion.');\n    }\n    \n    return $user;\n}\n\n// Modifier l'URL de connexion\nfunction custom_login_url() {\n    if (strpos($_SERVER['REQUEST_URI'], '/wp-admin') !== false || \n        strpos($_SERVER['REQUEST_URI'], '/wp-login.php') !== false) {\n        \n        $custom_login = get_option('custom_login_url', 'connexion-securisee');\n        \n        if (!isset($_GET['custom_login']) || $_GET['custom_login'] !== $custom_login) {\n            wp_redirect(home_url());\n            exit;\n        }\n    }\n}\nadd_action('init', 'custom_login_url');\n\n// Sécuriser les headers HTTP\nfunction add_security_headers() {\n    header('X-Content-Type-Options: nosniff');\n    header('X-Frame-Options: SAMEORIGIN');\n    header('X-XSS-Protection: 1; mode=block');\n    header('Referrer-Policy: strict-origin-when-cross-origin');\n    header('Content-Security-Policy: default-src \\'self\\'; script-src \\'self\\' \\'unsafe-inline\\'; style-src \\'self\\' \\'unsafe-inline\\';');\n}\nadd_action('send_headers', 'add_security_headers');\n\n// Validation et sanitisation des données\nfunction validate_and_sanitize_input($input, $type = 'text') {\n    switch ($type) {\n        case 'email':\n            return sanitize_email($input);\n        case 'url':\n            return esc_url_raw($input);\n        case 'int':\n            return intval($input);\n        case 'float':\n            return floatval($input);\n        case 'html':\n            return wp_kses_post($input);\n        default:\n            return sanitize_text_field($input);\n    }\n}\n\n// Exemple d'utilisation pour traiter un formulaire\nfunction process_secure_form() {\n    if (isset($_POST['submit']) && wp_verify_nonce($_POST['security_nonce'], 'secure_form_action')) {\n        \n        $name = validate_and_sanitize_input($_POST['name']);\n        $email = validate_and_sanitize_input($_POST['email'], 'email');\n        $message = validate_and_sanitize_input($_POST['message'], 'html');\n        \n        // Validation supplémentaire\n        if (empty($name) || empty($email) || !is_email($email)) {\n            wp_die('Données invalides.');\n        }\n        \n        // Traitement sécurisé des données\n        // ...\n    }\n}\n\n// Sécuriser les uploads\nfunction secure_file_uploads($file) {\n    $allowed_types = array('jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx');\n    $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));\n    \n    if (!in_array($file_extension, $allowed_types)) {\n        $file['error'] = 'Type de fichier non autorisé.';\n        return $file;\n    }\n    \n    // Vérifier la taille\n    if ($file['size'] > 5 * 1024 * 1024) { // 5MB\n        $file['error'] = 'Fichier trop volumineux.';\n        return $file;\n    }\n    \n    // Renommer le fichier\n    $file['name'] = wp_generate_uuid4() . '.' . $file_extension;\n    \n    return $file;\n}\nadd_filter('wp_handle_upload_prefilter', 'secure_file_uploads');\n\n// Monitoring des activités suspectes\nfunction log_suspicious_activity($activity, $details = '') {\n    $log_entry = array(\n        'timestamp' => current_time('mysql'),\n        'ip' => $_SERVER['REMOTE_ADDR'],\n        'user_agent' => $_SERVER['HTTP_USER_AGENT'],\n        'activity' => $activity,\n        'details' => $details,\n        'user_id' => get_current_user_id()\n    );\n    \n    // Stocker dans la base de données ou un fichier log\n    error_log('SECURITY: ' . json_encode($log_entry));\n    \n    // Envoyer une alerte email si critique\n    if (in_array($activity, array('brute_force', 'malware_detected', 'privilege_escalation'))) {\n        wp_mail(\n            get_option('admin_email'),\n            'Alerte de sécurité - ' . get_bloginfo('name'),\n            'Activité suspecte détectée: ' . $activity . '\\n\\nDétails: ' . json_encode($log_entry)\n        );\n    }\n}\n\n// Détecter les tentatives d'injection SQL\nfunction detect_sql_injection() {\n    $request_string = $_SERVER['REQUEST_URI'] . serialize($_POST) . serialize($_GET);\n    \n    $sql_patterns = array(\n        '/union.*select/i',\n        '/select.*from/i',\n        '/insert.*into/i',\n        '/update.*set/i',\n        '/delete.*from/i',\n        '/drop.*table/i',\n        '/exec.*xp_/i',\n        '/sp_.*password/i'\n    );\n    \n    foreach ($sql_patterns as $pattern) {\n        if (preg_match($pattern, $request_string)) {\n            log_suspicious_activity('sql_injection_attempt', $request_string);\n            wp_die('Accès interdit.');\n        }\n    }\n}\nadd_action('init', 'detect_sql_injection');\n\n// .htaccess - Configuration serveur\n/*\n# Protéger wp-config.php\n<files wp-config.php>\norder allow,deny\ndeny from all\n</files>\n\n# Protéger .htaccess\n<files ~ \"^.*\\.([Hh][Tt][Aa])\">\norder allow,deny\ndeny from all\nsatisfy all\n</files>\n\n# Désactiver l'exécution PHP dans uploads\n<Directory \"/wp-content/uploads/\">\n    <Files \"*.php\">\n        Order Deny,Allow\n        Deny from All\n    </Files>\n</Directory>\n\n# Limiter les tentatives de connexion\n<Limit POST>\norder allow,deny\nallow from all\n</Limit>\n\n# Bloquer l'accès à certains fichiers\n<FilesMatch \"\\.(htaccess|htpasswd|ini|log|sh|inc|bak)$\">\nOrder Allow,Deny\nDeny from all\n</FilesMatch>\n\n# Protéger contre les hotlinks\nRewriteEngine on\nRewriteCond %{HTTP_REFERER} !^$\nRewriteCond %{HTTP_REFERER} !^http(s)?://(www\\.)?yourdomain.com [NC]\nRewriteRule \\.(jpg|jpeg|png|gif)$ - [NC,F,L]\n*/\n\n?>"
      }
    },
    {
      "id": 7,
      "title": "Optimisation Performance",
      "category": "performance",
      "description": "Optimiser les performances de WordPress",
      "content": {
        "introduction": "L'optimisation des performances améliore l'expérience utilisateur et le référencement.",
        "steps": [
          "Mise en cache",
          "Optimisation de la base de données",
          "Optimisation des images",
          "Minification des assets",
          "CDN et optimisations serveur"
        ],
        "code": "<?php\n// Cache de page simple\nfunction simple_page_cache() {\n    if (is_user_logged_in() || is_admin()) {\n        return;\n    }\n    \n    $cache_file = WP_CONTENT_DIR . '/cache/' . md5($_SERVER['REQUEST_URI']) . '.html';\n    \n    // Servir depuis le cache si disponible\n    if (file_exists($cache_file) && (time() - filemtime($cache_file)) < 3600) {\n        readfile($cache_file);\n        exit;\n    }\n    \n    // Commencer la mise en cache\n    ob_start('save_page_cache');\n}\n\nfunction save_page_cache($html) {\n    if (is_user_logged_in() || is_admin()) {\n        return $html;\n    }\n    \n    $cache_dir = WP_CONTENT_DIR . '/cache';\n    if (!is_dir($cache_dir)) {\n        wp_mkdir_p($cache_dir);\n    }\n    \n    $cache_file = $cache_dir . '/' . md5($_SERVER['REQUEST_URI']) . '.html';\n    file_put_contents($cache_file, $html);\n    \n    return $html;\n}\n\nadd_action('template_redirect', 'simple_page_cache');\n\n// Optimisation des requêtes\nfunction optimize_queries() {\n    // Désactiver les requêtes inutiles\n    remove_action('wp_head', 'wp_generator');\n    remove_action('wp_head', 'wlwmanifest_link');\n    remove_action('wp_head', 'rsd_link');\n    remove_action('wp_head', 'wp_shortlink_wp_head');\n    \n    // Limiter les révisions\n    if (!defined('WP_POST_REVISIONS')) {\n        define('WP_POST_REVISIONS', 3);\n    }\n    \n    // Nettoyer la base de données\n    wp_schedule_event(time(), 'weekly', 'cleanup_database');\n}\nadd_action('init', 'optimize_queries');\n\n// Nettoyage automatique de la base de données\nfunction cleanup_database() {\n    global $wpdb;\n    \n    // Supprimer les révisions anciennes\n    $wpdb->query(\n        \"DELETE FROM {$wpdb->posts} WHERE post_type = 'revision' AND post_date < DATE_SUB(NOW(), INTERVAL 30 DAY)\"\n    );\n    \n    // Supprimer les commentaires spam\n    $wpdb->query(\n        \"DELETE FROM {$wpdb->comments} WHERE comment_approved = 'spam' AND comment_date < DATE_SUB(NOW(), INTERVAL 30 DAY)\"\n    );\n    \n    // Supprimer les transients expirés\n    $wpdb->query(\n        \"DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_%' AND option_value < UNIX_TIMESTAMP()\"\n    );\n    \n    // Optimiser les tables\n    $tables = $wpdb->get_results('SHOW TABLES', ARRAY_N);\n    foreach ($tables as $table) {\n        $wpdb->query(\"OPTIMIZE TABLE {$table[0]}\");\n    }\n}\nadd_action('cleanup_database', 'cleanup_database');\n\n// Compression et minification\nfunction compress_output() {\n    if (ob_get_level()) {\n        ob_end_clean();\n    }\n    \n    ob_start('compress_html');\n}\n\nfunction compress_html($html) {\n    // Minifier le HTML\n    $html = preg_replace('/\\s+/', ' ', $html);\n    $html = preg_replace('/<!--[^>]*-->/', '', $html);\n    $html = str_replace(array('\\r\\n', '\\r', '\\n', '\\t'), '', $html);\n    \n    return $html;\n}\n\nadd_action('template_redirect', 'compress_output');\n\n// Optimisation des images\nfunction optimize_images() {\n    // Ajouter des formats d'image modernes\n    add_theme_support('post-thumbnails');\n    \n    // Lazy loading natif\n    add_filter('wp_lazy_loading_enabled', '__return_true');\n    \n    // Tailles d'images responsives\n    add_image_size('mobile', 480, 320, true);\n    add_image_size('tablet', 768, 512, true);\n    add_image_size('desktop', 1200, 800, true);\n}\nadd_action('after_setup_theme', 'optimize_images');\n\n// Servir les images WebP\nfunction serve_webp_images($image_url) {\n    $webp_url = str_replace(array('.jpg', '.jpeg', '.png'), '.webp', $image_url);\n    \n    if (strpos($_SERVER['HTTP_ACCEPT'], 'image/webp') !== false) {\n        $webp_path = str_replace(get_site_url(), ABSPATH, $webp_url);\n        if (file_exists($webp_path)) {\n            return $webp_url;\n        }\n    }\n    \n    return $image_url;\n}\nadd_filter('wp_get_attachment_image_src', 'serve_webp_images');\n\n// Optimisation des scripts et styles\nfunction optimize_assets() {\n    // Déplacer jQuery dans le footer\n    wp_scripts()->add_data('jquery', 'group', 1);\n    wp_scripts()->add_data('jquery-core', 'group', 1);\n    wp_scripts()->add_data('jquery-migrate', 'group', 1);\n    \n    // Supprimer les styles inutiles\n    wp_dequeue_style('wp-block-library');\n    wp_dequeue_style('wp-block-library-theme');\n    wp_dequeue_style('classic-theme-styles');\n    \n    // Précharger les ressources importantes\n    echo '<link rel=\"preload\" href=\"' . get_stylesheet_uri() . '\" as=\"style\">';\n    echo '<link rel=\"preload\" href=\"' . get_template_directory_uri() . '/js/main.js\" as=\"script\">';\n}\nadd_action('wp_enqueue_scripts', 'optimize_assets');\n\n// Cache d'objets personnalisé\nclass Simple_Object_Cache {\n    private $cache = array();\n    \n    public function get($key) {\n        return isset($this->cache[$key]) ? $this->cache[$key] : false;\n    }\n    \n    public function set($key, $value, $expiration = 3600) {\n        $this->cache[$key] = array(\n            'value' => $value,\n            'expiration' => time() + $expiration\n        );\n    }\n    \n    public function delete($key) {\n        unset($this->cache[$key]);\n    }\n    \n    public function flush() {\n        $this->cache = array();\n    }\n    \n    public function is_expired($key) {\n        if (!isset($this->cache[$key])) {\n            return true;\n        }\n        \n        return time() > $this->cache[$key]['expiration'];\n    }\n}\n\n$simple_cache = new Simple_Object_Cache();\n\n// Utilisation du cache d'objets\nfunction get_popular_posts($limit = 5) {\n    global $simple_cache;\n    \n    $cache_key = 'popular_posts_' . $limit;\n    \n    if (!$simple_cache->is_expired($cache_key)) {\n        $posts = $simple_cache->get($cache_key);\n        if ($posts !== false) {\n            return $posts;\n        }\n    }\n    \n    // Requête coûteuse\n    $posts = get_posts(array(\n        'numberposts' => $limit,\n        'meta_key' => 'views',\n        'orderby' => 'meta_value_num',\n        'order' => 'DESC'\n    ));\n    \n    $simple_cache->set($cache_key, $posts, 1800); // 30 minutes\n    \n    return $posts;\n}\n\n// Optimisation des requêtes avec WP_Query\nfunction optimized_query_example() {\n    $args = array(\n        'post_type' => 'post',\n        'posts_per_page' => 10,\n        'fields' => 'ids', // Récupérer seulement les IDs\n        'no_found_rows' => true, // Pas de pagination\n        'update_post_meta_cache' => false, // Pas de cache meta\n        'update_post_term_cache' => false, // Pas de cache taxonomie\n        'suppress_filters' => true // Pas de filtres\n    );\n    \n    $query = new WP_Query($args);\n    \n    return $query;\n}\n\n// Monitorer les performances\nfunction performance_monitor() {\n    $start_time = microtime(true);\n    $start_memory = memory_get_usage();\n    \n    register_shutdown_function(function() use ($start_time, $start_memory) {\n        $end_time = microtime(true);\n        $end_memory = memory_get_usage();\n        \n        $execution_time = $end_time - $start_time;\n        $memory_usage = $end_memory - $start_memory;\n        \n        error_log(sprintf(\n            'Performance: %s - Time: %.4fs, Memory: %s',\n            $_SERVER['REQUEST_URI'],\n            $execution_time,\n            size_format($memory_usage)\n        ));\n    });\n}\n\nif (WP_DEBUG) {\n    add_action('init', 'performance_monitor');\n}\n\n// Configuration .htaccess pour la performance\n/*\n# Compression Gzip\n<IfModule mod_deflate.c>\n    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/x-javascript\n</IfModule>\n\n# Cache des fichiers statiques\n<IfModule mod_expires.c>\n    ExpiresActive On\n    ExpiresByType image/jpg \"access plus 1 month\"\n    ExpiresByType image/jpeg \"access plus 1 month\"\n    ExpiresByType image/gif \"access plus 1 month\"\n    ExpiresByType image/png \"access plus 1 month\"\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/pdf \"access plus 1 month\"\n    ExpiresByType text/javascript \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    ExpiresByType text/html \"access plus 1 day\"\n</IfModule>\n\n# Headers de cache\n<IfModule mod_headers.c>\n    <FilesMatch \"\\.(ico|pdf|flv|jpg|jpeg|png|gif|js|css|swf)$\">\n        Header set Cache-Control \"max-age=2592000, public\"\n    </FilesMatch>\n</IfModule>\n*/\n\n?>"
      }
    },
    {
      "id": 8,
      "title": "Gutenberg et Blocs",
      "category": "blocks",
      "description": "Créer des blocs personnalisés pour Gutenberg",
      "content": {
        "introduction": "Gutenberg est l'éditeur de blocs moderne de WordPress, permettant de créer des contenus riches.",
        "steps": [
          "Architecture des blocs",
          "Création d'un bloc basique",
          "Attributs et contrôles",
          "Sauvegarde et rendu",
          "Blocs dynamiques"
        ],
        "code": "// package.json\n{\n  \"name\": \"mon-bloc-custom\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"build\": \"wp-scripts build\",\n    \"start\": \"wp-scripts start\"\n  },\n  \"devDependencies\": {\n    \"@wordpress/scripts\": \"^23.0.0\"\n  }\n}\n\n// webpack.config.js\nconst defaultConfig = require('@wordpress/scripts/config/webpack.config');\n\nmodule.exports = {\n  ...defaultConfig,\n  entry: {\n    'mon-bloc': './src/index.js',\n    'autre-bloc': './src/autre-bloc/index.js'\n  }\n};\n\n// src/index.js\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { useBlockProps, RichText, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, ColorPicker, RangeControl, SelectControl } from '@wordpress/components';\n\n// Styles\nimport './style.scss';\nimport './editor.scss';\n\nregisterBlockType('mon-theme/mon-bloc', {\n  title: __('Mon Bloc Custom', 'mon-theme'),\n  description: __('Un bloc personnalisé pour mon thème', 'mon-theme'),\n  category: 'design',\n  icon: 'admin-customizer',\n  keywords: [__('custom'), __('mon-bloc')],\n  supports: {\n    html: false,\n    align: ['left', 'center', 'right', 'wide', 'full'],\n    color: {\n      background: true,\n      text: true\n    },\n    spacing: {\n      margin: true,\n      padding: true\n    }\n  },\n  attributes: {\n    title: {\n      type: 'string',\n      source: 'html',\n      selector: '.mon-bloc-title',\n      default: __('Mon titre par défaut', 'mon-theme')\n    },\n    content: {\n      type: 'string',\n      source: 'html',\n      selector: '.mon-bloc-content',\n      default: __('Mon contenu par défaut', 'mon-theme')\n    },\n    backgroundColor: {\n      type: 'string',\n      default: '#ffffff'\n    },\n    textColor: {\n      type: 'string',\n      default: '#000000'\n    },\n    fontSize: {\n      type: 'number',\n      default: 16\n    },\n    layout: {\n      type: 'string',\n      default: 'standard'\n    },\n    showImage: {\n      type: 'boolean',\n      default: true\n    },\n    imageId: {\n      type: 'number'\n    },\n    imageUrl: {\n      type: 'string'\n    }\n  },\n  \n  edit: ({ attributes, setAttributes }) => {\n    const {\n      title,\n      content,\n      backgroundColor,\n      textColor,\n      fontSize,\n      layout,\n      showImage,\n      imageId,\n      imageUrl\n    } = attributes;\n    \n    const blockProps = useBlockProps({\n      style: {\n        backgroundColor,\n        color: textColor,\n        fontSize: `${fontSize}px`\n      }\n    });\n    \n    return (\n      <div {...blockProps}>\n        <InspectorControls>\n          <PanelBody title={__('Paramètres du bloc', 'mon-theme')}>\n            <ColorPicker\n              label={__('Couleur de fond', 'mon-theme')}\n              color={backgroundColor}\n              onChange={(color) => setAttributes({ backgroundColor: color })}\n            />\n            \n            <ColorPicker\n              label={__('Couleur du texte', 'mon-theme')}\n              color={textColor}\n              onChange={(color) => setAttributes({ textColor: color })}\n            />\n            \n            <RangeControl\n              label={__('Taille de police', 'mon-theme')}\n              value={fontSize}\n              onChange={(value) => setAttributes({ fontSize: value })}\n              min={12}\n              max={48}\n            />\n            \n            <SelectControl\n              label={__('Mise en page', 'mon-theme')}\n              value={layout}\n              options={[\n                { label: 'Standard', value: 'standard' },\n                { label: 'Carte', value: 'card' },\n                { label: 'Bannière', value: 'banner' }\n              ]}\n              onChange={(value) => setAttributes({ layout: value })}\n            />\n          </PanelBody>\n        </InspectorControls>\n        \n        <div className={`mon-bloc-layout-${layout}`}>\n          <RichText\n            tagName=\"h3\"\n            className=\"mon-bloc-title\"\n            value={title}\n            onChange={(value) => setAttributes({ title: value })}\n            placeholder={__('Tapez votre titre...', 'mon-theme')}\n          />\n          \n          <RichText\n            tagName=\"p\"\n            className=\"mon-bloc-content\"\n            value={content}\n            onChange={(value) => setAttributes({ content: value })}\n            placeholder={__('Tapez votre contenu...', 'mon-theme')}\n          />\n        </div>\n      </div>\n    );\n  },\n  \n  save: ({ attributes }) => {\n    const {\n      title,\n      content,\n      backgroundColor,\n      textColor,\n      fontSize,\n      layout\n    } = attributes;\n    \n    const blockProps = useBlockProps.save({\n      style: {\n        backgroundColor,\n        color: textColor,\n        fontSize: `${fontSize}px`\n      }\n    });\n    \n    return (\n      <div {...blockProps}>\n        <div className={`mon-bloc-layout-${layout}`}>\n          <RichText.Content\n            tagName=\"h3\"\n            className=\"mon-bloc-title\"\n            value={title}\n          />\n          \n          <RichText.Content\n            tagName=\"p\"\n            className=\"mon-bloc-content\"\n            value={content}\n          />\n        </div>\n      </div>\n    );\n  }\n});\n\n// Bloc dynamique (rendu côté serveur)\nregisterBlockType('mon-theme/bloc-dynamique', {\n  title: __('Bloc Dynamique', 'mon-theme'),\n  description: __('Un bloc avec rendu côté serveur', 'mon-theme'),\n  category: 'widgets',\n  icon: 'admin-tools',\n  attributes: {\n    postType: {\n      type: 'string',\n      default: 'post'\n    },\n    numberOfPosts: {\n      type: 'number',\n      default: 3\n    }\n  },\n  \n  edit: ({ attributes, setAttributes }) => {\n    const { postType, numberOfPosts } = attributes;\n    \n    return (\n      <div {...useBlockProps()}>\n        <InspectorControls>\n          <PanelBody title={__('Paramètres', 'mon-theme')}>\n            <SelectControl\n              label={__('Type de contenu', 'mon-theme')}\n              value={postType}\n              options={[\n                { label: 'Articles', value: 'post' },\n                { label: 'Pages', value: 'page' },\n                { label: 'Produits', value: 'produit' }\n              ]}\n              onChange={(value) => setAttributes({ postType: value })}\n            />\n            \n            <RangeControl\n              label={__('Nombre d\\'articles', 'mon-theme')}\n              value={numberOfPosts}\n              onChange={(value) => setAttributes({ numberOfPosts: value })}\n              min={1}\n              max={10}\n            />\n          </PanelBody>\n        </InspectorControls>\n        \n        <div className=\"bloc-dynamique-preview\">\n          <h4>{__('Aperçu du bloc dynamique', 'mon-theme')}</h4>\n          <p>{__('Affichage de', 'mon-theme')} {numberOfPosts} {postType}(s)</p>\n        </div>\n      </div>\n    );\n  },\n  \n  save: () => null // Rendu côté serveur\n});\n\n// PHP - Enregistrement des blocs\n<?php\nfunction register_custom_blocks() {\n    // Enregistrer le bloc statique\n    wp_register_script(\n        'mon-bloc-js',\n        get_template_directory_uri() . '/build/mon-bloc.js',\n        array('wp-blocks', 'wp-element', 'wp-editor'),\n        filemtime(get_template_directory() . '/build/mon-bloc.js')\n    );\n    \n    wp_register_style(\n        'mon-bloc-css',\n        get_template_directory_uri() . '/build/mon-bloc.css',\n        array(),\n        filemtime(get_template_directory() . '/build/mon-bloc.css')\n    );\n    \n    register_block_type('mon-theme/mon-bloc', array(\n        'editor_script' => 'mon-bloc-js',\n        'editor_style' => 'mon-bloc-css',\n        'style' => 'mon-bloc-css'\n    ));\n    \n    // Enregistrer le bloc dynamique\n    register_block_type('mon-theme/bloc-dynamique', array(\n        'editor_script' => 'mon-bloc-js',\n        'render_callback' => 'render_dynamic_block',\n        'attributes' => array(\n            'postType' => array(\n                'type' => 'string',\n                'default' => 'post'\n            ),\n            'numberOfPosts' => array(\n                'type' => 'number',\n                'default' => 3\n            )\n        )\n    ));\n}\nadd_action('init', 'register_custom_blocks');\n\n// Fonction de rendu pour le bloc dynamique\nfunction render_dynamic_block($attributes) {\n    $post_type = $attributes['postType'] ?? 'post';\n    $number_of_posts = $attributes['numberOfPosts'] ?? 3;\n    \n    $query = new WP_Query(array(\n        'post_type' => $post_type,\n        'posts_per_page' => $number_of_posts,\n        'post_status' => 'publish'\n    ));\n    \n    if (!$query->have_posts()) {\n        return '<p>Aucun contenu trouvé.</p>';\n    }\n    \n    ob_start();\n    ?>\n    <div class=\"bloc-dynamique\">\n        <h3>Derniers <?php echo esc_html($post_type); ?>s</h3>\n        <div class=\"bloc-dynamique-grid\">\n            <?php while ($query->have_posts()) : $query->the_post(); ?>\n                <div class=\"bloc-dynamique-item\">\n                    <?php if (has_post_thumbnail()) : ?>\n                        <div class=\"bloc-dynamique-image\">\n                            <?php the_post_thumbnail('thumbnail'); ?>\n                        </div>\n                    <?php endif; ?>\n                    <h4><a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a></h4>\n                    <p><?php echo wp_trim_words(get_the_excerpt(), 20); ?></p>\n                    <span class=\"bloc-dynamique-date\"><?php echo get_the_date(); ?></span>\n                </div>\n            <?php endwhile; ?>\n        </div>\n    </div>\n    <?php\n    \n    wp_reset_postdata();\n    return ob_get_clean();\n}\n\n// Ajouter une catégorie de blocs personnalisée\nfunction add_custom_block_category($categories) {\n    return array_merge(\n        $categories,\n        array(\n            array(\n                'slug' => 'mon-theme-blocks',\n                'title' => __('Mes Blocs Personnalisés', 'mon-theme'),\n                'icon' => 'admin-customizer'\n            )\n        )\n    );\n}\nadd_filter('block_categories_all', 'add_custom_block_category');\n\n// Styles pour les blocs\n/* style.scss */\n.wp-block-mon-theme-mon-bloc {\n  padding: 20px;\n  border-radius: 8px;\n  margin: 20px 0;\n  \n  .mon-bloc-title {\n    margin-bottom: 15px;\n    font-weight: bold;\n  }\n  \n  .mon-bloc-content {\n    line-height: 1.6;\n  }\n  \n  &.mon-bloc-layout-card {\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    border: 1px solid #e0e0e0;\n  }\n  \n  &.mon-bloc-layout-banner {\n    text-align: center;\n    padding: 40px 20px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n  }\n}\n\n.bloc-dynamique {\n  .bloc-dynamique-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    margin-top: 20px;\n  }\n  \n  .bloc-dynamique-item {\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    padding: 15px;\n    \n    .bloc-dynamique-image {\n      margin-bottom: 10px;\n      \n      img {\n        width: 100%;\n        height: auto;\n        border-radius: 4px;\n      }\n    }\n    \n    h4 {\n      margin-bottom: 10px;\n      \n      a {\n        text-decoration: none;\n        color: inherit;\n        \n        &:hover {\n          color: #0073aa;\n        }\n      }\n    }\n    \n    .bloc-dynamique-date {\n      font-size: 0.9em;\n      color: #666;\n    }\n  }\n}\n?>"
      }
    }
  ]
}