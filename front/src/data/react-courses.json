{
  "courses": [
    {
      "id": 1,
      "title": "Installation et Configuration",
      "category": "setup",
      "description": "Guide complet pour installer et configurer React",
      "content": {
        "introduction": "React est une bibliothèque JavaScript pour créer des interfaces utilisateur interactives.",
        "steps": [
          "Installation de Node.js",
          "Create React App",
          "Configuration de l'environnement",
          "Structure des dossiers",
          "Scripts de développement"
        ],
        "code": "npx create-react-app my-app\ncd my-app\nnpm start"
      }
    },
    {
      "id": 2,
      "title": "Premiers Composants",
      "category": "components",
      "description": "Créer vos premiers composants React",
      "content": {
        "introduction": "Les composants sont les blocs de construction de base de React.",
        "steps": [
          "Composants fonctionnels",
          "Props et passage de données",
          "Composition de composants",
          "Export et import"
        ],
        "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\nexport default Welcome;"
      }
    },
    {
      "id": 3,
      "title": "useState Hook",
      "category": "hooks",
      "description": "Gérer l'état local avec useState",
      "content": {
        "introduction": "useState permet d'ajouter un état local à vos composants fonctionnels.",
        "steps": [
          "Import de useState",
          "Déclaration d'état",
          "Mise à jour d'état",
          "État avec objets et tableaux"
        ],
        "code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}"
      }
    },
    {
      "id": 4,
      "title": "useEffect Hook",
      "category": "hooks",
      "description": "Gérer les effets de bord avec useEffect",
      "content": {
        "introduction": "useEffect permet d'exécuter des effets de bord dans vos composants.",
        "steps": [
          "Import de useEffect",
          "Effets au montage",
          "Effets avec dépendances",
          "Nettoyage des effets"
        ],
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [time, setTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return <p>Time: {time.toLocaleTimeString()}</p>;\n}"
      }
    },
    {
      "id": 5,
      "title": "useContext Hook",
      "category": "hooks",
      "description": "Partager des données avec useContext",
      "content": {
        "introduction": "useContext permet de consommer un contexte React sans wrapper.",
        "steps": [
          "Création d'un Context",
          "Provider de contexte",
          "Consommation avec useContext",
          "Bonnes pratiques"
        ],
        "code": "import React, { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext();\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Header />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Header() {\n  const theme = useContext(ThemeContext);\n  return <h1 className={theme}>Hello World</h1>;\n}"
      }
    },
    {
      "id": 6,
      "title": "useReducer Hook",
      "category": "hooks",
      "description": "Gérer un état complexe avec useReducer",
      "content": {
        "introduction": "useReducer est une alternative à useState pour gérer un état complexe.",
        "steps": [
          "Fonction reducer",
          "Actions et dispatch",
          "État initial",
          "Cas d'usage avancés"
        ],
        "code": "import React, { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'increment' })}>\n        +\n      </button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>\n        -\n      </button>\n    </div>\n  );\n}"
      }
    },
    {
      "id": 7,
      "title": "useMemo Hook",
      "category": "hooks",
      "description": "Optimiser les performances avec useMemo",
      "content": {
        "introduction": "useMemo permet de mémoriser des calculs coûteux.",
        "steps": [
          "Import de useMemo",
          "Mémorisation de calculs",
          "Dépendances",
          "Optimisation des performances"
        ],
        "code": "import React, { useMemo, useState } from 'react';\n\nfunction ExpensiveComponent({ items }) {\n  const [filter, setFilter] = useState('');\n\n  const filteredItems = useMemo(() => {\n    return items.filter(item => \n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [items, filter]);\n\n  return (\n    <div>\n      <input \n        value={filter} \n        onChange={(e) => setFilter(e.target.value)} \n        placeholder=\"Filter...\"\n      />\n      {filteredItems.map(item => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n}"
      }
    },
    {
      "id": 8,
      "title": "useCallback Hook",
      "category": "hooks",
      "description": "Mémoriser des fonctions avec useCallback",
      "content": {
        "introduction": "useCallback permet de mémoriser des fonctions pour éviter les re-renders.",
        "steps": [
          "Import de useCallback",
          "Mémorisation de fonctions",
          "Dépendances",
          "Optimisation des composants enfants"
        ],
        "code": "import React, { useState, useCallback } from 'react';\n\nfunction Parent() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('');\n\n  const increment = useCallback(() => {\n    setCount(c => c + 1);\n  }, []);\n\n  return (\n    <div>\n      <input \n        value={name} \n        onChange={(e) => setName(e.target.value)} \n      />\n      <Child onIncrement={increment} />\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n\nconst Child = React.memo(({ onIncrement }) => {\n  console.log('Child rendered');\n  return <button onClick={onIncrement}>Increment</button>;\n});"
      }
    },
    {
      "id": 9,
      "title": "Gestion des Formulaires",
      "category": "forms",
      "description": "Créer et gérer des formulaires en React",
      "content": {
        "introduction": "Les formulaires sont essentiels dans les applications React.",
        "steps": [
          "Composants contrôlés",
          "Gestion des inputs",
          "Validation",
          "Soumission de formulaires"
        ],
        "code": "import React, { useState } from 'react';\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Form submitted:', formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"name\"\n        value={formData.name}\n        onChange={handleChange}\n        placeholder=\"Name\"\n        required\n      />\n      <input\n        name=\"email\"\n        type=\"email\"\n        value={formData.email}\n        onChange={handleChange}\n        placeholder=\"Email\"\n        required\n      />\n      <textarea\n        name=\"message\"\n        value={formData.message}\n        onChange={handleChange}\n        placeholder=\"Message\"\n        required\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}"
      }
    },
    {
      "id": 10,
      "title": "React Router",
      "category": "routing",
      "description": "Navigation et routage dans React",
      "content": {
        "introduction": "React Router permet de créer des applications single-page avec navigation.",
        "steps": [
          "Installation de React Router",
          "Configuration des routes",
          "Navigation entre pages",
          "Paramètres d'URL"
        ],
        "code": "import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/contact\">Contact</Link>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/contact\" element={<Contact />} />\n      </Routes>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h1>Home Page</h1>;\n}\n\nfunction About() {\n  return <h1>About Page</h1>;\n}\n\nfunction Contact() {\n  return <h1>Contact Page</h1>;\n}"
      }
    },
    {
      "id": 11,
      "title": "Appels API avec Fetch",
      "category": "api",
      "description": "Récupérer des données depuis une API",
      "content": {
        "introduction": "Apprendre à récupérer et envoyer des données via des API REST.",
        "steps": [
          "Fetch API",
          "Gestion des promesses",
          "Gestion des erreurs",
          "Loading states"
        ],
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      const data = await response.json();\n      setUsers(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      <h2>Users</h2>\n      {users.map(user => (\n        <div key={user.id}>\n          <h3>{user.name}</h3>\n          <p>{user.email}</p>\n        </div>\n      ))}\n    </div>\n  );\n}"
      }
    },
    {
      "id": 12,
      "title": "Axios pour les requêtes HTTP",
      "category": "api",
      "description": "Utiliser Axios pour les appels API",
      "content": {
        "introduction": "Axios est une bibliothèque populaire pour effectuer des requêtes HTTP.",
        "steps": [
          "Installation d'Axios",
          "Configuration de base",
          "Intercepteurs",
          "Gestion des erreurs"
        ],
        "code": "import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Configuration globale d'Axios\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = 'Bearer token';\n\nfunction PostList() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/posts');\n      setPosts(response.data);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createPost = async (postData) => {\n    try {\n      const response = await axios.post('/posts', postData);\n      setPosts([...posts, response.data]);\n    } catch (error) {\n      console.error('Error creating post:', error);\n    }\n  };\n\n  return (\n    <div>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        posts.map(post => (\n          <div key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.body}</p>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}"
      }
    },
    {
      "id": 13,
      "title": "Tests avec Jest et React Testing Library",
      "category": "testing",
      "description": "Tester vos composants React",
      "content": {
        "introduction": "Les tests sont essentiels pour maintenir la qualité du code.",
        "steps": [
          "Configuration de Jest",
          "React Testing Library",
          "Tests unitaires",
          "Tests d'intégration"
        ],
        "code": "import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Counter from './Counter';\n\n// Test d'un composant Counter\ndescribe('Counter Component', () => {\n  test('renders initial count', () => {\n    render(<Counter />);\n    expect(screen.getByText('Count: 0')).toBeInTheDocument();\n  });\n\n  test('increments count when button is clicked', () => {\n    render(<Counter />);\n    const button = screen.getByText('Increment');\n    fireEvent.click(button);\n    expect(screen.getByText('Count: 1')).toBeInTheDocument();\n  });\n\n  test('decrements count when decrement button is clicked', () => {\n    render(<Counter />);\n    const incrementBtn = screen.getByText('Increment');\n    const decrementBtn = screen.getByText('Decrement');\n    \n    fireEvent.click(incrementBtn);\n    fireEvent.click(decrementBtn);\n    \n    expect(screen.getByText('Count: 0')).toBeInTheDocument();\n  });\n});"
      }
    },
    {
      "id": 14,
      "title": "Gestion d'état avec Redux",
      "category": "state",
      "description": "Gérer l'état global avec Redux",
      "content": {
        "introduction": "Redux est une bibliothèque de gestion d'état prévisible pour JavaScript.",
        "steps": [
          "Installation de Redux",
          "Actions et Action Creators",
          "Reducers",
          "Store et Provider"
        ],
        "code": "// actions.js\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n\nexport const increment = () => ({ type: INCREMENT });\nexport const decrement = () => ({ type: DECREMENT });\n\n// reducer.js\nimport { INCREMENT, DECREMENT } from './actions';\n\nconst initialState = {\n  count: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, count: state.count + 1 };\n    case DECREMENT:\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n\n// App.js\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\nimport Counter from './Counter';\n\nconst store = createStore(counterReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  );\n}"
      }
    },
    {
      "id": 15,
      "title": "Styled Components",
      "category": "styling",
      "description": "Styliser vos composants avec CSS-in-JS",
      "content": {
        "introduction": "Styled Components permet d'écrire du CSS directement dans vos composants.",
        "steps": [
          "Installation de styled-components",
          "Création de composants stylés",
          "Props et styles dynamiques",
          "Thèmes"
        ],
        "code": "import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\n\n// Styled components\nconst Button = styled.button`\n  background: ${props => props.primary ? props.theme.primary : 'white'};\n  color: ${props => props.primary ? 'white' : props.theme.primary};\n  font-size: 1rem;\n  margin: 1rem;\n  padding: 0.5rem 1rem;\n  border: 2px solid ${props => props.theme.primary};\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: ${props => props.theme.primary};\n    color: white;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2rem;\n`;\n\nconst Title = styled.h1`\n  color: ${props => props.theme.primary};\n  font-size: 2rem;\n  margin-bottom: 1rem;\n`;\n\n// Thème\nconst theme = {\n  primary: '#3498db',\n  secondary: '#2ecc71'\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <Title>Styled Components Example</Title>\n        <Button>Normal Button</Button>\n        <Button primary>Primary Button</Button>\n      </Container>\n    </ThemeProvider>\n  );\n}"
      }
    }
  ]
}